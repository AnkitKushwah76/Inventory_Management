c
 item.empty?()
item
c
params[:items][:item_name]
c
  end
    end
     render json: item, status: 200
     else
      render json: { error: 'record not found....' }
    if item.empty?()
    item = Item.where('item_name LIKE ?', "%#{params[:items][:item_name]}%")
    byebug
 def itemsSearch
c
params[:itemname]
c
 @items = Item.where('item LIKE ?', "%{a}%")
params[:itemname]
c
  @items = Item.where('item LIKE ?', "%{a}%")
@items.ids
@items.id
  @items = Item.where('item LIKE ?', "%{a}%")
 @items
c
cc
c
@items
params[:itemname]
c
c\
c
params[:itemname]
c
params[:itemname]
c
 @items
c
 post '/api/v1/items', params: {item: {item_name: @item.item_name, item_price: @item.item_price, item_quatity: @item.item_quatity}}
c
params[:email]
params[:name]
c
@user.name
@user.id
c
response.body
response
 get '/api/v1/user'
c
response.body
response
 get '/api/v1/invoices'
c
 @item = create(:invoice)
c
 @item = create(:invoice)
c
 @item = create(:invoice)
c
response.body
response
respone
c
response.body
response
 @item = create(:invoice)
c
 @item = create(:invoice)
c
response.status
response
response.body
response
exit
response.body
response
response.body
response
c
response.body
response
invoices
c
exit
params[:id]
c
item
exit
item.save
params[:item_name]
c
item.save
c
 item.save
params[:item_name]
item
c
params[:item_price]
c
params[:item_price]
params[:item_name]
c
exit
@item.id
@item
exit
response.body
response
exit
exiy
response
response.body
response
 @item = create(:invoice)
c
  @item = create(:invoice)
c
params[:user_id]
c
params[:item_name]
c
item_params
params[:id]
c
params[:id]
c
params[:id]
c
params[:item_price]
params[:item_image]
params[:item_name]
params[:items][:item_name]
  @item = Item.find(params[:id])
c
render json: { message: 'item deleted successfully..'}
  item = Item.find(params[:id])
c
render json: item.as_json(only: [:item_name,:item_price,:item_quatity,:user_id]).merge(item_image_path: url_for(item.item_image))
item.item_image.present?
item = Item.find(params[:id])
item.item_image.present?
c
 item.destroy 
item.item_image.attached? 
 item = Item.find(params[:id])
c
item.destroy
 item = Item.find(params[:id])
c
item.destroy
item = Item.find(params[:id])
c
item.save
 item = Item.new(item_params)
c
   21:           avatar_path: url_for(items.item_image))
   20:           items.as_json(only: [:item_name,:item_price,:item_quatity,:user_id]).merge(
  if items.item_image.attached? 
render json: items.map{ |items|
 items=Item.find(params[:id])
c
 items = Item.all.joins(:item_image_attachment)
c
items = Item.all.joins(:item_image_attachment)
exit
 render json: items, include: [:item_image]
 items = Item.all
exit
 render json: items, include: [:item_image]
 items = Item.all
 render json: items, include: [:item_image]
exit
render json: items, include: [:images]
items = Item.all
c
render json: items
 items = Item.all
render json: items
c
exit
render json: items
items = Item.all
c
params[:invoices][:item_name]
c
params[:invoices][:user_id]
params[:invoices][:item_id]
params[:invoices][:total_amount]
params[:invoices][:time]
params[:invoices][:date]
params[:invoices][:item_quatity]
params[:invoices][:item_price]
params[:invoices][:item_name]
exit
exi
end
if invoices.save
invoices.save
invoices = Invoice.new(invoices_params)
exit
c
invoice = Invoice.find(params[:id])
c
render json: { message: 'Invoice not found' }
invoice = Invoice.find(params[:id])
c
 invoices = Invoice.find(params[:id])
c
 invoices = Invoice.find(params[:id])
c
 invoices = Invoice.find(params[:id])
c
 invoices = Invoice.find(params[:id])
exit
c
c\
invoices = Invoice.find(params[:id])
c
invoices = Invoice.find(params[:id])
invoices
 if invoices
   10:     if invoices
c
user
c
exit
 items = Item.all
c
render json: items
items = Item.all
c
items
exit
params[:id]
items
SystemStackErrorSystemStackErrorSystemStackError
http://127.0.0.1:3000 /api/v1/items/
exit
@items
a
exit
a
exit
a
exit
@all_users
exit
@all_users
exit
u.has_role? :admin
exit
@my_orders
c
